//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Dental.DentalReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DentalReference.IDentalService")]
    public interface IDentalService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/GetPacjentList", ReplyAction="http://tempuri.org/IDentalService/GetPacjentListResponse")]
        DAL.Model.Pacjent[] GetPacjentList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/GetPacjentList", ReplyAction="http://tempuri.org/IDentalService/GetPacjentListResponse")]
        System.Threading.Tasks.Task<DAL.Model.Pacjent[]> GetPacjentListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/GetPacjentByID", ReplyAction="http://tempuri.org/IDentalService/GetPacjentByIDResponse")]
        DAL.Model.Pacjent GetPacjentByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/GetPacjentByID", ReplyAction="http://tempuri.org/IDentalService/GetPacjentByIDResponse")]
        System.Threading.Tasks.Task<DAL.Model.Pacjent> GetPacjentByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/PacjentInsert", ReplyAction="http://tempuri.org/IDentalService/PacjentInsertResponse")]
        bool PacjentInsert(DAL.Model.Pacjent pacjent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/PacjentInsert", ReplyAction="http://tempuri.org/IDentalService/PacjentInsertResponse")]
        System.Threading.Tasks.Task<bool> PacjentInsertAsync(DAL.Model.Pacjent pacjent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/PacjentUpdate", ReplyAction="http://tempuri.org/IDentalService/PacjentUpdateResponse")]
        bool PacjentUpdate(DAL.Model.Pacjent pacjent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/PacjentUpdate", ReplyAction="http://tempuri.org/IDentalService/PacjentUpdateResponse")]
        System.Threading.Tasks.Task<bool> PacjentUpdateAsync(DAL.Model.Pacjent pacjent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/PacjentDelete", ReplyAction="http://tempuri.org/IDentalService/PacjentDeleteResponse")]
        bool PacjentDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/PacjentDelete", ReplyAction="http://tempuri.org/IDentalService/PacjentDeleteResponse")]
        System.Threading.Tasks.Task<bool> PacjentDeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/GetAdresList", ReplyAction="http://tempuri.org/IDentalService/GetAdresListResponse")]
        DAL.Model.Adres[] GetAdresList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/GetAdresList", ReplyAction="http://tempuri.org/IDentalService/GetAdresListResponse")]
        System.Threading.Tasks.Task<DAL.Model.Adres[]> GetAdresListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/GetAdresByID", ReplyAction="http://tempuri.org/IDentalService/GetAdresByIDResponse")]
        DAL.Model.Adres GetAdresByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/GetAdresByID", ReplyAction="http://tempuri.org/IDentalService/GetAdresByIDResponse")]
        System.Threading.Tasks.Task<DAL.Model.Adres> GetAdresByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/AdresInsert", ReplyAction="http://tempuri.org/IDentalService/AdresInsertResponse")]
        bool AdresInsert(DAL.Model.Adres adres);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/AdresInsert", ReplyAction="http://tempuri.org/IDentalService/AdresInsertResponse")]
        System.Threading.Tasks.Task<bool> AdresInsertAsync(DAL.Model.Adres adres);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/AdresUpdate", ReplyAction="http://tempuri.org/IDentalService/AdresUpdateResponse")]
        bool AdresUpdate(DAL.Model.Adres adres);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/AdresUpdate", ReplyAction="http://tempuri.org/IDentalService/AdresUpdateResponse")]
        System.Threading.Tasks.Task<bool> AdresUpdateAsync(DAL.Model.Adres adres);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/AdresDelete", ReplyAction="http://tempuri.org/IDentalService/AdresDeleteResponse")]
        bool AdresDelete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDentalService/AdresDelete", ReplyAction="http://tempuri.org/IDentalService/AdresDeleteResponse")]
        System.Threading.Tasks.Task<bool> AdresDeleteAsync(int id);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDentalServiceChannel : System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DentalServiceClient : System.ServiceModel.ClientBase<Dental.DentalReference.IDentalService>, Dental.DentalReference.IDentalService {
        
        public DentalServiceClient() {
        }
        
        public DentalServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DentalServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DentalServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DentalServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public DAL.Model.Pacjent[] GetPacjentList() {
            return base.Channel.GetPacjentList();
        }
        
        public System.Threading.Tasks.Task<DAL.Model.Pacjent[]> GetPacjentListAsync() {
            return base.Channel.GetPacjentListAsync();
        }
        
        public DAL.Model.Pacjent GetPacjentByID(int id) {
            return base.Channel.GetPacjentByID(id);
        }
        
        public System.Threading.Tasks.Task<DAL.Model.Pacjent> GetPacjentByIDAsync(int id) {
            return base.Channel.GetPacjentByIDAsync(id);
        }
        
        public bool PacjentInsert(DAL.Model.Pacjent pacjent) {
            return base.Channel.PacjentInsert(pacjent);
        }
        
        public System.Threading.Tasks.Task<bool> PacjentInsertAsync(DAL.Model.Pacjent pacjent) {
            return base.Channel.PacjentInsertAsync(pacjent);
        }
        
        public bool PacjentUpdate(DAL.Model.Pacjent pacjent) {
            return base.Channel.PacjentUpdate(pacjent);
        }
        
        public System.Threading.Tasks.Task<bool> PacjentUpdateAsync(DAL.Model.Pacjent pacjent) {
            return base.Channel.PacjentUpdateAsync(pacjent);
        }
        
        public bool PacjentDelete(int id) {
            return base.Channel.PacjentDelete(id);
        }
        
        public System.Threading.Tasks.Task<bool> PacjentDeleteAsync(int id) {
            return base.Channel.PacjentDeleteAsync(id);
        }
        
        public DAL.Model.Adres[] GetAdresList() {
            return base.Channel.GetAdresList();
        }
        
        public System.Threading.Tasks.Task<DAL.Model.Adres[]> GetAdresListAsync() {
            return base.Channel.GetAdresListAsync();
        }
        
        public DAL.Model.Adres GetAdresByID(int id) {
            return base.Channel.GetAdresByID(id);
        }
        
        public System.Threading.Tasks.Task<DAL.Model.Adres> GetAdresByIDAsync(int id) {
            return base.Channel.GetAdresByIDAsync(id);
        }
        
        public bool AdresInsert(DAL.Model.Adres adres) {
            return base.Channel.AdresInsert(adres);
        }
        
        public System.Threading.Tasks.Task<bool> AdresInsertAsync(DAL.Model.Adres adres) {
            return base.Channel.AdresInsertAsync(adres);
        }
        
        public bool AdresUpdate(DAL.Model.Adres adres) {
            return base.Channel.AdresUpdate(adres);
        }
        
        public System.Threading.Tasks.Task<bool> AdresUpdateAsync(DAL.Model.Adres adres) {
            return base.Channel.AdresUpdateAsync(adres);
        }
        
        public bool AdresDelete(int id) {
            return base.Channel.AdresDelete(id);
        }
        
        public System.Threading.Tasks.Task<bool> AdresDeleteAsync(int id) {
            return base.Channel.AdresDeleteAsync(id);
        }
    }
}
